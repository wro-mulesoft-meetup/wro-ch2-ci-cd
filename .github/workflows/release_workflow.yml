name: Publish to Exchange

on:
  push:
    branches:
      - 'main'

env:
  nexus_username: ${{ secrets.MULESOFT_NEXUS_USERNAME }}
  nexus_password: ${{ secrets.MULESOFT_NEXUS_PASSWORD }}
  connected_app_clientId: ${{ secrets.MULESOFT_CONNECTED_APP_CLIENT_ID }}
  connected_app_clientSecret: ${{ secrets.MULESOFT_CONNECTED_APP_CLIENT_SECRET }}
  path_maven_settings: ${{ github.workspace }}/.maven/settings.xml

jobs:

  compile:
    name: Compile
    runs-on: ubuntu-latest

    steps:

    - name: Checkout this repository
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Validate & Compile
      run: mvn -B -s ${{ env.path_maven_settings }} clean compile -DskipTests

  test:
    name: Test
    needs: [compile]
    runs-on: ubuntu-latest

    steps:

    - name: Checkout this repository
      uses: actions/checkout@v4

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Run MUnit tests
      run: mvn -B -s ${{ env.path_maven_settings }} clean test

    - name: Test Summary
      if: always()
      uses: test-summary/action@v2
      with:
        paths: "**/surefire-reports/TEST-*.xml"

    - name: Upload MUnit reports
      uses: actions/upload-artifact@v4
      with:
        name: munit-test-reports
        path: target/site/munit/coverage/

  release:
    name: Release
    needs: [test]
    runs-on: ubuntu-latest

    steps:

    - name: Generate a CI/CD app token
      id: generate-cicd-app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ vars.CICD_APP_ID }}
        private-key: ${{ secrets.CICD_APP_PRIVATE_KEY }}

    - name: Set CI/CD app token
      run: echo "git_token=${{ steps.generate-cicd-app-token.outputs.token }}" >> $GITHUB_ENV

    - name: Checkout this repository
      uses: actions/checkout@v4
      with:
        token: ${{ env.git_token }}

    - name: Set up Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set automated git user
      run: |
        git config user.email "ci-cd-wizard@wro-meetup.com"
        git config user.name "[ci-cd automation]"
            
    - name: Release Prepare
      run: mvn -B -s ${{ env.path_maven_settings }} release:prepare -Darguments="-DskipTests"

    - name: Release Perform
      run: mvn -B -s ${{ env.path_maven_settings }} release:perform -Darguments="-DskipTests"

    - name: Get artifact name
      id: get-artifact-name
      run: echo "artifact_name=$(basename target/*.jar)" >> $GITHUB_OUTPUT

    - name: Get application version
      id: get-version
      run: |
        echo "app_version=$(echo ${{ steps.get-artifact-name.outputs.artifact_name }} | awk -F'app-|-mule-application.jar' '{print $2}')" >> $GITHUB_OUTPUT

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.get-artifact-name.outputs.artifact_name }}
        path: target/*.jar

    - name: Trigger deployment workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ env.git_token }}
        script: |
          github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy_workflow.yml',
            ref: 'main',
            inputs: {
            environment: 'DEV',
            version: '${{ steps.get-version.outputs.app_version }}',
            }
          })

    - name: Summary
      run: |
         echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
         echo "| --------------- | -------------- |" >> $GITHUB_STEP_SUMMARY
         echo "| Version | ${{ steps.get-version.outputs.app_version }} |" >> $GITHUB_STEP_SUMMARY